[gd_scene load_steps=5 format=2]

[ext_resource path="res://shaders/postfx_blur.tres" type="Shader" id=1]
[ext_resource path="res://icon.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

export (int) var iterations = 8;
export (float) var radius = 1.0;

var objects = [];

func _ready() -> void:
	get_tree().connect(\"screen_resized\", self, \"_screen_resized\");
	call_deferred('load_shader');

func load_shader() -> void:
	var buffer_node = $buffer;
	var screen_size = get_viewport().size;
	var rect_size = get_rect().size;

	for i in range(iterations):
		var obj: Control;
		var mat: ShaderMaterial;

		if (i == 0):
			obj = buffer_node.get_child(0);
			mat = obj.material;
		else:
			var buffer = buffer_node.duplicate();
			add_child(buffer);
			obj = buffer.get_child(0);
			mat = obj.material.duplicate();
			obj.material = mat;
		
		obj.rect_size = rect_size;

		if (mat):
			var dir = Vector2(1, 0);
			var rad = (iterations - i - 1) * radius;

			if (i % 2 == 0):
				dir = Vector2(0, 1);

			mat.set_shader_param(\"direction\", dir);
			mat.set_shader_param(\"radius\", rad);
			mat.set_shader_param(\"resolution\", screen_size);

		objects.append(obj);

func _screen_resized() -> void:
	var screen_size = get_viewport().size;
	var rect_size = get_rect().size;
	
	for obj in objects:
		obj.rect_size = rect_size;
		var mat = obj.material;
		mat.set_shader_param(\"resolution\", screen_size);
"

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 1 )
shader_param/resolution = null
shader_param/direction = Vector2( 1, 0 )
shader_param/radius = 8.0

[node name="blur_shader" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )

[node name="buffer" type="BackBufferCopy" parent="."]
copy_mode = 2

[node name="blur" type="TextureRect" parent="buffer"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
texture = ExtResource( 2 )
expand = true
